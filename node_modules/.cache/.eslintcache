[{"C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\index.js":"1","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\App.js":"2","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\components\\movieList\\movieList.js":"3","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\components\\header\\Header.js":"4","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\pages\\home\\home.js":"5","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\pages\\movieDetail\\movie.js":"6","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\components\\card\\card.js":"7"},{"size":175,"mtime":1643461655000,"results":"8","hashOfConfig":"9"},{"size":826,"mtime":1688829932192,"results":"10","hashOfConfig":"9"},{"size":1027,"mtime":1643461655000,"results":"11","hashOfConfig":"9"},{"size":763,"mtime":1643461655000,"results":"12","hashOfConfig":"9"},{"size":2314,"mtime":1684495040886,"results":"13","hashOfConfig":"9"},{"size":4841,"mtime":1688828933868,"results":"14","hashOfConfig":"9"},{"size":1464,"mtime":1643461655000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fxtu6e",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\index.js",[],[],"C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\App.js",[],[],"C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\components\\movieList\\movieList.js",["42","43"],[],"import React, {useEffect, useState} from \"react\"\nimport \"./movieList.css\"\nimport { useParams } from \"react-router-dom\"\nimport Cards from \"../card/card\"\n\nconst MovieList = () => {\n    \n    const [movieList, setMovieList] = useState([])\n    const {type} = useParams()\n\n    useEffect(() => {\n        getData()\n    }, [])\n\n    useEffect(() => {\n        getData()\n    }, [type])\n\n    const getData = () => {\n        fetch(`https://api.themoviedb.org/3/movie/${type ? type : \"popular\"}?api_key=4e44d9029b1270a757cddc766a1bcb63&language=en-US`)\n        .then(res => res.json())\n        .then(data => setMovieList(data.results))\n    }\n\n    return (\n        <div className=\"movie__list\">\n            <h2 className=\"list__title\">{(type ? type : \"POPULAR\").toUpperCase()}</h2>\n            <div className=\"list__cards\">\n                {\n                    movieList.map(movie => (\n                        <Cards movie={movie} />\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default MovieList","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\components\\header\\Header.js",["44"],[],"import React from \"react\"\nimport \"./Header.css\"\nimport { Link } from \"react-router-dom\"\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"headerLeft\">\n                <Link to=\"/\"><img className=\"header__icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/IMDB_Logo_2016.svg/2560px-IMDB_Logo_2016.svg.png\" /></Link>\n                <Link to=\"/movies/popular\" style={{textDecoration: \"none\"}}><span>Popular</span></Link>\n                <Link to=\"/movies/top_rated\" style={{textDecoration: \"none\"}}><span>Top Rated</span></Link>\n                <Link to=\"/movies/upcoming\" style={{textDecoration: \"none\"}}><span>Upcoming</span></Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\pages\\home\\home.js",["45"],[],"import React, { useEffect, useState } from \"react\"\nimport \"./home.css\"\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Carousel } from 'react-responsive-carousel';\nimport { Link } from \"react-router-dom\";\nimport MovieList from \"../../components/movieList/movieList\";\n\nconst Home = () => {\n\n    const [ popularMovies, setPopularMovies ] = useState([])\n\n    useEffect(() => {\n        fetch(\"https://api.themoviedb.org/3/movie/popular?api_key=99034d0a1364ab8283ae5f1c3e410070\")\n        .then(res => res.json())\n        .then(data => setPopularMovies(data.results))\n    }, [])\n\n    return (\n        <>\n            <div className=\"poster\">\n                <Carousel\n                    showThumbs={false}\n                    autoPlay={true}\n                    transitionTime={3}\n                    infiniteLoop={true}\n                    showStatus={false}\n                >\n                    {\n                        popularMovies.map(movie => (\n                            <Link style={{textDecoration:\"none\",color:\"white\"}} to={`/movie/${movie.id}`} >\n                                <div className=\"posterImage\">\n                                    <img src={`https://image.tmdb.org/t/p/original${movie && movie.backdrop_path}`} />\n                                </div>\n                                <div className=\"posterImage__overlay\">\n                                    <div className=\"posterImage__title\">{movie ? movie.original_title: \"\"}</div>\n                                    <div className=\"posterImage__runtime\">\n                                        {movie ? movie.release_date : \"\"}\n                                        <span className=\"posterImage__rating\">\n                                            {movie ? movie.vote_average :\"\"}\n                                            <i className=\"fas fa-star\" />{\" \"}\n                                        </span>\n                                    </div>\n                                    <div className=\"posterImage__description\">{movie ? movie.overview : \"\"}</div>\n                                </div>\n                            </Link>\n                        ))\n                    }\n                </Carousel>\n                <MovieList />\n            </div>\n        </>\n    )\n}\n\nexport default Home","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\pages\\movieDetail\\movie.js",["46","47","48","49","50","51"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"./movie.css\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst Movie = () => {\r\n  const [currentMovieDetail, setMovie] = useState();\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}?api_key=99034d0a1364ab8283ae5f1c3e410070`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => setMovie(data));\r\n  };\r\n\r\n  return (\r\n    <div className=\"movie\">\r\n      <div className=\"movie__intro\">\r\n        <img\r\n          className=\"movie__backdrop\"\r\n          src={`https://image.tmdb.org/t/p/original${\r\n            currentMovieDetail ? currentMovieDetail.backdrop_path : \"\"\r\n          }`}\r\n        />\r\n      </div>\r\n      <div className=\"movie__detail\">\r\n        <div className=\"movie__detailLeft\">\r\n          <div className=\"movie__posterBox\">\r\n            <img\r\n              className=\"movie__poster\"\r\n              src={`https://image.tmdb.org/t/p/original${\r\n                currentMovieDetail ? currentMovieDetail.poster_path : \"\"\r\n              }`}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"movie__detailRight\">\r\n          <div className=\"movie__detailRightTop\">\r\n            <div className=\"movie__name\">\r\n              {currentMovieDetail ? currentMovieDetail.original_title : \"\"}\r\n            </div>\r\n            <div className=\"movie__tagline\">\r\n              {currentMovieDetail ? currentMovieDetail.tagline : \"\"}\r\n            </div>\r\n            <div className=\"movie__rating\">\r\n              {currentMovieDetail ? currentMovieDetail.vote_average : \"\"}{\" \"}\r\n              <i class=\"fas fa-star\" />\r\n              <span className=\"movie__voteCount\">\r\n                {currentMovieDetail\r\n                  ? \"(\" + currentMovieDetail.vote_count + \") votes\"\r\n                  : \"\"}\r\n              </span>\r\n            </div>\r\n            <div className=\"movie__runtime\">\r\n              {currentMovieDetail ? currentMovieDetail.runtime + \" mins\" : \"\"}\r\n            </div>\r\n            <div className=\"movie__releaseDate\">\r\n              {currentMovieDetail\r\n                ? \"Release date: \" + currentMovieDetail.release_date\r\n                : \"\"}\r\n            </div>\r\n            <div className=\"movie__genres\">\r\n              {currentMovieDetail && currentMovieDetail.genres\r\n                ? currentMovieDetail.genres.map((genre) => (\r\n                    <>\r\n                      <span className=\"movie__genre\" id={genre.id}>\r\n                        {genre.name}\r\n                      </span>\r\n                    </>\r\n                  ))\r\n                : \"\"}\r\n            </div>\r\n          </div>\r\n          <div className=\"movie__detailRightBottom\">\r\n            <div className=\"synopsisText\">Synopsis</div>\r\n            <div>{currentMovieDetail ? currentMovieDetail.overview : \"\"}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"movie__links\">\r\n        <div className=\"movie__heading\">Useful Links</div>\r\n        {currentMovieDetail && currentMovieDetail.homepage && (\r\n          <a\r\n            href={currentMovieDetail.homepage}\r\n            target=\"_blank\"\r\n            style={{ textDecoration: \"none\" }}\r\n          >\r\n            <p>\r\n              <span className=\"movie__homeButton movie__Button\">\r\n                Homepage <i className=\"newTab fas fa-external-link-alt\"></i>\r\n              </span>\r\n            </p>\r\n          </a>\r\n        )}\r\n        {currentMovieDetail && currentMovieDetail.imdb_id && (\r\n          <a\r\n            href={\"https://www.imdb.com/title/\" + currentMovieDetail.imdb_id}\r\n            target=\"_blank\"\r\n            style={{ textDecoration: \"none\" }}\r\n          >\r\n            <p>\r\n              <span className=\"movie__imdbButton movie__Button\">\r\n                IMDb<i className=\"newTab fas fa-external-link-alt\"></i>\r\n              </span>\r\n            </p>\r\n          </a>\r\n        )}\r\n      </div>\r\n      <div className=\"movie__heading\">Production companies</div>\r\n      <div className=\"movie__production\">\r\n        {currentMovieDetail &&\r\n          currentMovieDetail.production_companies &&\r\n          currentMovieDetail.production_companies.map((company) => (\r\n            <>\r\n              {company.logo_path && (\r\n                <span className=\"productionCompanyImage\">\r\n                  <img\r\n                    className=\"movie__productionComapany\"\r\n                    src={\r\n                      \"https://image.tmdb.org/t/p/original\" + company.logo_path\r\n                    }\r\n                  />\r\n                  <span>{company.name}</span>\r\n                </span>\r\n              )}\r\n            </>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","C:\\Users\\sharm\\OneDrive\\Desktop\\GitHub\\imdb-clone\\src\\components\\card\\card.js",["52"],[],"import React, {useEffect, useState} from \"react\"\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\"\nimport \"./card.css\"\nimport { Link } from \"react-router-dom\"\n\nconst Cards = ({movie}) => {\n\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        setTimeout(() => {\n            setIsLoading(false)\n        }, 1500)\n    }, []) \n\n    return <>\n    {\n        isLoading\n        ?\n        <div className=\"cards\">\n            <SkeletonTheme color=\"#202020\" highlightColor=\"#444\">\n                <Skeleton height={300} duration={2} />\n            </SkeletonTheme>\n        </div>\n        :\n        <Link to={`/movie/${movie.id}`} style={{textDecoration:\"none\", color:\"white\"}}>\n            <div className=\"cards\">\n                <img className=\"cards__img\" src={`https://image.tmdb.org/t/p/original${movie?movie.poster_path:\"\"}`} />\n                <div className=\"cards__overlay\">\n                    <div className=\"card__title\">{movie?movie.original_title:\"\"}</div>\n                    <div className=\"card__runtime\">\n                        {movie?movie.release_date:\"\"}\n                        <span className=\"card__rating\">{movie?movie.vote_average:\"\"}<i className=\"fas fa-star\" /></span>\n                    </div>\n                    <div className=\"card__description\">{movie ? movie.overview.slice(0,118)+\"...\" : \"\"}</div>\n                </div>\n            </div>\n        </Link>\n    }\n    </>\n}\n\nexport default Cards",{"ruleId":"53","severity":1,"message":"54","line":13,"column":8,"nodeType":"55","endLine":13,"endColumn":10,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"54","line":17,"column":8,"nodeType":"55","endLine":17,"endColumn":14,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":9,"column":30,"nodeType":"60","endLine":9,"endColumn":175},{"ruleId":"58","severity":1,"message":"59","line":32,"column":37,"nodeType":"60","endLine":32,"endColumn":119},{"ruleId":"53","severity":1,"message":"54","line":12,"column":6,"nodeType":"55","endLine":12,"endColumn":8,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"59","line":25,"column":9,"nodeType":"60","endLine":30,"endColumn":11},{"ruleId":"58","severity":1,"message":"59","line":35,"column":13,"nodeType":"60","endLine":40,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":89,"column":11,"nodeType":"60","messageId":"64","endLine":93,"endColumn":12,"fix":"65"},{"ruleId":"62","severity":1,"message":"63","line":102,"column":11,"nodeType":"60","messageId":"64","endLine":106,"endColumn":12,"fix":"66"},{"ruleId":"58","severity":1,"message":"59","line":123,"column":19,"nodeType":"60","endLine":128,"endColumn":21},{"ruleId":"58","severity":1,"message":"59","line":28,"column":17,"nodeType":"60","endLine":28,"endColumn":120},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["67"],["68"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["69"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"70","text":"71"},{"range":"72","text":"71"},{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"73","fix":"77"},[3312,3312]," rel=\"noreferrer\"",[3789,3789],"Update the dependencies array to be: [getData]",{"range":"78","text":"79"},"Update the dependencies array to be: [getData, type]",{"range":"80","text":"81"},{"range":"82","text":"79"},[314,316],"[getData]",[366,372],"[getData, type]",[305,307]]